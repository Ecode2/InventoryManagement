name: CI/CD Pipeline for Inventory Management System

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Django App with Nginx
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          set -e  # Exit immediately if any command fails
          set -x  # Debug output
          ls
          cd ~/InventoryManager || (git clone git@github.com:Ecode2/InventoryManagement.git ~/InventoryManager && cd ~/InventoryManager)
          git pull origin main
          if [ ! -d env ]; then sudo apt install python3-venv -y && python3 -m venv env; fi
          source env/bin/activate
          bash build.sh

          # Set systemd environment variables
          sudo systemctl set-environment ALLOWED_HOSTS="${{ secrets.EC2_PUBLIC_IP }}, ${{ secrets.EC2_PUBLIC_DOMAIN }}"
          sudo systemctl set-environment CSRF_TRUSTED_ORIGINS="http://${{ secrets.EC2_PUBLIC_IP }}, http://${{ secrets.EC2_PUBLIC_DOMAIN }}, https://${{ secrets.CUSTOM_DOMAIN }}"
          sudo systemctl set-environment DEBUG=False
          sudo systemctl set-environment SECRET_KEY="${{ secrets.SECRET_KEY }}"
          sudo systemctl set-environment DATABASE_URL="${{ secrets.DATABASE_URL }}"
          sudo systemctl set-environment EMAIL_HOST="${{ secrets.EMAIL_HOST }}"
          sudo systemctl set-environment EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD }}"
          sudo systemctl set-environment EMAIL_HOST_USER="${{ secrets.EMAIL_HOST_USER }}"
          sudo systemctl set-environment DEFAULT_FROM_EMAIL="${{ secrets.EMAIL_HOST_USER }}"
          sudo systemctl set-environment EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          sudo systemctl set-environment EMAIL_USE_TLS=True
          
          sudo systemctl restart InventoryManager
          sudo systemctl restart nginx
          EOF